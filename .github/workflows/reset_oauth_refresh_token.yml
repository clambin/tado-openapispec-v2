name: Reset OAuth2 refresh token via OAuth device flow

on:
  # # allows the workflow to be started manually
  workflow_dispatch:
    inputs:
      client_id:
        description: 'client id'
        required: true
        default: '1bb50063-6b0c-4d11-bd99-387f4a91cc46'

jobs:
  start_device_flow:
    runs-on: ubuntu-latest

    outputs:
      device_code: ${{ steps.start.outputs.device_code }}
      verification_url: ${{ steps.start.outputs.verification_url }}

    steps:
      - name: start
        id: start
        run: |
          response=$(curl -X POST -H Content-Type: application/json -s -o device_authorize.json https://login.tado.com/oauth2/device_authorize?client_id=$CLIENT_ID&scope=offline_access)
          device_code=$(echo $response | jq -r '.device_code')
          echo "Device code: $device_code"
          echo "device_code=$device_code" >> $GITHUB_OUTPUT
          verification_uri_complete=$(echo $response | jq -r '.verification_uri_complete')
          echo "verification_url=$verification_uri_complete" >> $GITHUB_OUTPUT
          echo "Please login via $verification_uri_complete"
        env:
          CLIENT_ID: ${{ inputs.client_id }}

  please-click-me-to-login:
    runs-on: ubuntu-latest
    needs: start_device_flow

    steps:
      - name: Please click me to show the login URL
        run: |
          echo "Please login via $VERIFICATION_URL"
        env:
          VERIFICATION_URL: ${{ needs.start_device_flow.outputs.verification_url }}

  obtain-refresh-token:
    runs-on: ubuntu-latest
    needs: [start_device_flow, please-login]

    outputs:
      refresh_token: ${{ steps.get_token.outputs.refresh_token }}

    steps:
      - name: Obtain refresh token after successful login (try every 5 seconds for max 2 minutes)
        id: get_token
        run: |
          # echo "Device code: $DEVICE_CODE"
          # echo "Client id: $CLIENT_ID"
          verified=false
          attempts_left=24 # this comes down to two minutes
          GRANT_TYPE="urn:ietf:params:oauth:grant-type:device_code"
          while [ $attempts_left -gt 0 ] && [ $verified = "false" ]
          do
            sleep 5
            URL="https://login.tado.com/oauth2/token?client_id=$CLIENT_ID&device_code=$DEVICE_CODE&grant_type=$GRANT_TYPE"
            # echo "Token URL: $URL"
            response=$(curl -X POST -H Content-Type: application/json -s $URL)
            #echo "Response: $response"
            error=$(echo $response | jq -r '.error')
            #echo "Error: $error"
            if [ $error = "null" ]
              then
                verified=true
                echo "You've successfully logged in, and we've obtained the refresh token"
                access_token=$(echo $response | jq -r '.access_token')
                refresh_token=$(echo $response | jq -r '.refresh_token')
                echo "refresh_token=$refresh_token" >> $GITHUB_OUTPUT
              else
                #echo "Error: $error"
                echo "You have not logged in yet, trying again in a couple of seconds"
            fi
            let "attempts_left = $attempts_left - 1"
            #echo $attempts_left
          done
        env:
          CLIENT_ID: ${{ inputs.client_id }}
          DEVICE_CODE: ${{ needs.start_device_flow.outputs.device_code }}

  save-refresh-token:
    env:
      GITHUB_TOKEN: ${{ secrets.GHPAT_TOKEN || github.token }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - run: |
          npm install --global sodium-native@4.0.4
          echo "NODE_PATH=$(npm root -g)" >> $GITHUB_ENV
      - name: Save tado refresh token
        uses: actions/github-script@v6
        env:
          TADO_REFRESH_TOKEN: ${{ 'REPLACE ME WITH TOKEN' }}
        with:
          result-encoding: string
          github-token: ${{ env.GITHUB_TOKEN }}
          script: |
            const sodium = require('sodium-native');
            const { data: {key: publicKey, key_id: keyId} } = await github.rest.actions.getRepoPublicKey({...context.repo});
            if (publicKey) {
              const key = Buffer.from(publicKey, 'base64');
              const message = Buffer.from(process.env.FACEBOOK_TOKEN);
              const ciphertext = Buffer.alloc(message.length + sodium.crypto_box_SEALBYTES);

              sodium.crypto_box_seal(ciphertext, message, key);
              const encryptedToken = ciphertext.toString('base64');

              await github.rest.actions.createOrUpdateRepoSecret({
                ...context.repo, 
                secret_name: 'TADO_REFRESH_TOKEN',
                encrypted_value: encryptedToken,
                key_id: keyId,
              });
            } else {
              core.error('Failed to fetch the public key. Unable to update secret');
            }