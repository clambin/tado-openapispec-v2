name: Reset OAuth2 refresh token via OAuth device flow

on:
  # # allows the workflow to be started manually
  workflow_dispatch:
    inputs:
      client_id:
        description: 'client id'
        required: true
        default: '1bb50063-6b0c-4d11-bd99-387f4a91cc46'

jobs:
  start_device_flow:
    runs-on: ubuntu-latest

    outputs:
      device_code: ${{ steps.start.outputs.device_code }}

    steps:
      - name: start
        run: |
          response=$(curl -X POST -H Content-Type: application/json -s -o device_authorize.json https://login.tado.com/oauth2/device_authorize?client_id=$CLIENT_ID&scope=offline_access)
          device_code=$(echo $response | jq -r '.device_code')
          echo "Device code: $device_code"
          echo "device_code=$device_code" >> $GITHUB_OUTPUT
          verification_uri_complete=$(echo $response | jq -r '.verification_uri_complete')
          echo "verification_url=$verification_uri_complete" >> $GITHUB_OUTPUT
          echo "Please login via $verification_uri_complete"
        env:
          CLIENT_ID: ${{ inputs.client_id }}

  please-login:
    runs-on: ubuntu-latest
    needs: start_device_flow

    steps:
      - name: login
        run: |
          echo "Please login via $VERIFICATION_URL"
        env:
          VERIFICATION_URL: ${{ jobs.start_device_flow.steps.start.outputs.verification_url }}

  obtain-token:
    runs-on: ubuntu-latest
    needs: start_device_flow

    steps:
      - name: obtain token (try every 5 seconds for max 1 minute)
        run: |
          # echo "Device code: $DEVICE_CODE"
          # echo "Client id: $CLIENT_ID"
          verified=false
          attempts_left=12
          GRANT_TYPE="urn:ietf:params:oauth:grant-type:device_code"
          while [ $attempts_left -gt 0 ] && [ $verified = "false" ]
          do
            sleep 5
            URL="https://login.tado.com/oauth2/token?client_id=$CLIENT_ID&device_code=$DEVICE_CODE&grant_type=$GRANT_TYPE"
            # echo "Token URL: $URL"
            response=$(curl -X POST -H Content-Type: application/json -s $URL)
            #echo "Response: $response"
            error=$(echo $response | jq -r '.error')
            #echo "Error: $error"
            if [ $error = "null" ]
              then
                verified=true
                echo "You've successfully logged in, and we've obtained the refresh token"
                access_token=$(echo $response | jq -r '.access_token')
                refresh_token=$(echo $response | jq -r '.refresh_token')
              else
                #echo "Error: $error"
                echo "You have not logged in yet, trying again in a couple of seconds"
            fi
            let "attempts_left = $attempts_left - 1"
            #echo $attempts_left
          done
        env:
          CLIENT_ID: ${{ inputs.client_id }}
          DEVICE_CODE: ${{ needs.start_device_flow.outputs.device_code }}
