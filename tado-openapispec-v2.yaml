openapi: 3.0.0
info:
  title: tado API v2
  description: |
    Community managed API specification for the tado smart thermostat solution 
    (this specification is not officially supported or published by tado).
    
    Github repository where this specification is maintained: 
    [https://github.com/kritsel/tado-openapispec-v2](https://github.com/kritsel/tado-openapispec-v2)
  version: 2.2024.08.14.1
servers:
  - url: https://my.tado.com/api/v2/
security:
  - oauth2: [] # no scopes

paths:
  ####################################################################################################################
  # user paths

  /me:
    get:
      summary: Returns information about the authenticated user, (summary) information of their home(s) and mobile devices.
      operationId: getMe # hint for client code generators
      tags:
        - user
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized401'

  /homes/{homeId}/users:
    get:
      summary: Get all users associated with the provided homeId.
      operationId: getUsers # hint for client code generators
      tags:
        - user
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  ####################################################################################################################
  # mobile device paths
  /homes/{homeId}/mobileDevices:
    get:
      summary: Get all mobile devices associated with the provided homeId
      operationId: getMobileDevices # hint for client code generators
      tags:
        - mobile device
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MobileDevice'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/mobileDevices/{mobileDeviceId}:
    get:
      summary: Get a specific mobile device associated with the provided homeId
      operationId: getMobileDevice # hint for client code generators
      tags:
        - mobile device
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
        - in: path
          name: mobileDeviceId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a mobile device
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDevice'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
    delete:
      summary: Remove the relationship between a mobile device and a home
      operationId: deleteMobileDeviceFromHome # hint for client code generators
      tags:
        - mobile device
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            pattern: "application/json"
            example: "application/json"
          required: true
          description: a 'Content-Type' header with value 'application/json' is mandatory for this specific endpoint
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
        - in: path
          name: mobileDeviceId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a mobile device
      responses:
        '200':
          description: successful response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  ####################################################################################################################
  # home paths
  /homes/{homeId}:
    get:
      summary: Get full details of a single home.
      description: Use `GET /me` to determine the `homeId` of your home
      operationId: getHome # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Home'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/airComfort:
    get:
      summary: Get humidity and temperature indicators for all zones (rooms) in this home
      description: "'Climate comfort' element in the app"
      operationId: getAirComfort # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirComfort'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/heatingSystem:
    get:
      summary: Get information about the presence of various heating systems in this home
      operationId: getHeatingSystem # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeatingSystem'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/weather:
    get:
      summary: Get the current weather for the given home
      operationId: getWeather # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weather'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  ####################################################################################################################
  # home control paths

  /homes/{homeId}/overlay:
    post:
      summary: Control the overlays (manual override of the configured temperature schedule) of multiple rooms (a.k.a. zones) with a single API method
      operationId: postZoneOverlays # hint for client code generators
      tags:
        - home control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ZoneOverlay'
      responses:
        '204':
          description: successful empty response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '422':
          $ref: '#/components/responses/InputError422'
    delete:
      summary: Remove the overlays (manual override of the configured temperature schedule) of multiple rooms (a.k.a. zones) with a single API method
      operationId: deleteZoneOverlays # hint for client code generators
      tags:
        - home control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: query
          name: rooms
          schema:
            type: array
            items:
              type: integer
          required: true
          description: list of zone IDs whose overlay should be removed (do not include a HOT_WATER zone ID)
      responses:
        '204':
          description: successful empty response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/presenceLock:
    put:
      summary: Specify whether someone at home or not
      operationId: putHomePresenceLock # hint for client code generators
      tags:
        - home control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresenceLock'
      responses:
        '204':
          description: successful empty response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '422': # verify
          $ref: '#/components/responses/InputError422'

  /homes/{homeId}/state:
    get:
      summary: Get information about the presence state of the home
      operationId: getHomeState # hint for client code generators
      tags:
        - home control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomeState'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  ####################################################################################################################
  # zone  paths
  /homes/{homeId}/zones:
    get:
      summary: Get all zones (a.k.a. rooms) associated with the provided homeId.
      description: >
        Includes full information of the tado devices present in each zone. 
        The response does not include any device of DeviceType `IB01` (Internet Bridge);
        use `/homes/{homeId}/devices` instead.
      operationId: getZones # hint for client code generators
      tags:
        - zone
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zone'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/zones/{zoneId}/capabilities:
    get:
      summary: Get the temperature setting capabilities of this zone
      description: This includes current temperature, humidity and heating power information.
      operationId: getZoneCapabilities # hint for client code generators
      tags:
        - zone
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneCapabilities'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  /homes/{homeId}/zones/{zoneId}/state:
    get:
      summary: Get the current state details of a zone (a.k.a. room).
      description: This includes current temperature, humidity and heating power information.
      operationId: getZoneState # hint for client code generators
      tags:
        - zone
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneState'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  /homes/{homeId}/zoneStates:
    get:
      summary: Get zone state details of every zone (a.k.a. room) in the specified home
      description: This includes current temperature, humidity and heating power information.
      operationId: getZoneStates # hint for client code generators
      tags:
        - zone
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneStates'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  ####################################################################################################################
  # zone control paths

  /homes/{homeId}/zones/{zoneId}/earlyStart:
    get:
      summary: Control whether Tado makes sure a set temperature is reached at the start of a block
      operationId: getZoneEarlyStart # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarlyStart'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'
        '422':
          $ref: '#/components/responses/UnsupportedForZoneType422'
    put:
      summary: Control whether Tado makes sure a set temperature is reached at the start of a block
      operationId: putZoneEarlyStart # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EarlyStart'
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarlyStart'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'
        '422':
          $ref: '#/components/responses/UnsupportedForZoneType422'

  /homes/{homeId}/zones/{zoneId}/overlay:
    get:
      summary: Get the overlay (manual override of the configured temperature schedule) of the given zone (a.k.a. room)
      operationId: getZoneOverlay # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneOverlay'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404' # when the zone does not exist of there is no overlay for this zone
    post:
      summary: Set the overlay (manual override of the configured temperature schedule) for the given zone (a.k.a. room)
      operationId: postZoneOverlay # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ZoneOverlay'
      responses:
        '204':
          description: successful empty response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '422':
          $ref: '#/components/responses/InputError422'
    delete:
      summary: Remove the overlay (manual override of the configured temperature schedule) for the given zone (a.k.a. room)
      operationId: deleteZoneOverlay # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '204':
          description: successful empty response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/zones/{zoneId}/schedule/awayConfiguration:
    get:
      summary: Get the settings to use for the given zone (a.k.a. room) when everyone is out of the house
      operationId: getZoneAwayConfiguration # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneAwayConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/zones/{zoneId}/schedule/activeTimetable:
    get:
      summary: Get the active timetable type for the given zone (a.k.a. room)
      operationId: getZoneActiveTimetable # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimetableType'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/zones/{zoneId}/schedule/timetables:
    get:
      summary: Get the available timetable types
      operationId: getZoneTimetables # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                description: all available timetable types
                items:
                  $ref: '#/components/schemas/TimetableType'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/zones/{zoneId}/schedule/timetables/{timetableTypeId}:
    get:
      summary: Get the timetable type for the given timetable type ID
      operationId: getZoneTimetable # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
        - in: path
          name: timetableTypeId
          schema:
            type: integer
          required: true
          example: 1
          description: ID of a timetable type
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimetableType'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  /homes/{homeId}/zones/{zoneId}/schedule/timetables/{timetableTypeId}/blocks:
    get:
      summary: Get the user defined timetable blocks for the given zoneId and given timetableId.
      # the double empty lines below are intentional, they control the layout in Swagger UI.
      description: >
        For each zone you can define three different schedules, where each schedule is identified by a timetable type: 
        ONE_DAY (the same schedule for every day of the week),
        THREE_DAY (the same schedule for weekdays, and a separate schedule for saturday and sunday) and
        SEVEN_DAY (a different schedule for each day of the week).
        
        
        Only one of these schedules can be active at any one time 
        (see `/homes/{homeId}/zones/{zoneId}/schedule/activeTimetable`).
        
        
        Each schedule for a timetable type consists of an array of blocks.
        Each block consists of a day type (e.g. MONDAY_TO_FRIDAY for the THREE_DAY timetable type), a start time and end time 
        and the temperature setting for that time period.
      operationId: getZoneTimetableBlocks # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
        - in: path
          name: timetableTypeId
          schema:
            type: integer
          required: true
          example: 1
          description: ID of a timetable type
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimetableBlock'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  /homes/{homeId}/zones/{zoneId}/schedule/timetables/{timetableTypeId}/blocks/{dayType}:
    get:
      summary: Get the user defined timetable blocks for the given zoneId, timetableId and dayType
      # the double empty lines below are intentional, they control the layout in Swagger UI.
      description: >
        For each zone you can define three different schedules, where each schedule is identified by a timetable type: 
        ONE_DAY (the same schedule for every day of the week),
        THREE_DAY (the same schedule for weekdays, and a separate schedule for saturday and sunday) and
        SEVEN_DAY (a different schedule for each day of the week).
        
        
        Only one of these schedules can be active at any one time 
        (see `/homes/{homeId}/zones/{zoneId}/schedule/activeTimetable`).
        
        
        Each schedule for a timetable type consists of an array of blocks.
        Each block consists of a day type (e.g. MONDAY_TO_FRIDAY for the THREE_DAY timetable type), a start time and end time 
        and the temperature setting for that time period.
      operationId: getZoneTimetableBlocksByDayType # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
        - in: path
          name: timetableTypeId
          schema:
            type: integer
          required: true
          example: 1
          description: ID of a timetable type
        - in: path
          name: dayType
          schema:
            $ref: '#/components/schemas/DayType'
          required: true
          example: MONDAY_TO_FRIDAY
          description: name of a day type
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimetableBlock'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  ####################################################################################################################
  # device paths
  /homes/{homeId}/devices:
    get:
      summary: Get all tado devices associated with the provided homeId.
      # the float blank lines int the description are intentional, to force a new line in the rendered text on Swagger UI
      description: >
        The device information included in the response for `/homes/{homeId}/zones` and `/homes/{homeId}/zones/{zoneId}`
        includes the `duties` property, while the response for this path does not. 
        
        
        The response for this path does include devices of DeviceType `IB01` (Internet Bridge), 
        while the responses for the zone related paths do not.
      operationId: getDevices # hint for client code generators
      tags:
        - device
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceBase'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/devices/{deviceId}/identify:
    post:
      summary: Instruct the device to say 'hi' on their display
      operationId: identifyDevice # hint for client code generators
      tags:
        - device
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
        - in: path
          name: deviceId
          schema:
            type: string
          required: true
          description: the `shortSerialNo` of a device
      responses:
        '200':
          description: successful response; response body is empty, but response statuscode is 200 and not 204
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/deviceList:
    get:
      summary: Get all tado devices associated with the provided homeId, together with the zone (a.k.a. room) they are in
      operationId: getDeviceList # hint for client code generators
      tags:
        - device
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a home (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceList'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  ####################################################################################################################
  # report paths

  /homes/{homeId}/zones/{zoneId}/dayReport:
    get:
      summary: Get historic information for a particular day
      operationId: getZoneDayReport # hint for client code generators
      tags:
        - report
      parameters:
        - in: path
          name: homeId
          schema:
            type: integer
            format: int64
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a zone (unique within a home)
        - in: query
          name: date
          schema:
            type: string
            format: date
          required: true
          example: "2018-02-14"
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DayReport'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'


components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        password:
          tokenUrl: https://auth.tado.com/oauth/token
          scopes: {}

  responses:
    Unauthorized401:
      description: unauthorized, invalid access token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    AccessDenied403:
      description: access denied, the authenticated user does not have access to the specified resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound404:
      description: not found, the specified resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InputError422:
      description: the request body contains errors (e.g. a required property is missing)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnsupportedForZoneType422:
      description: the requested operation is not supported for the zone type of the specified zone
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

  schemas:
    AirComfort:
      type: object
      properties:
        freshness:
          type: object
          properties:
            value:
              type: string
              example: FRESH
              description: "known values: FAIR, FRESH"
            lastOpenWindow:
              type: string
              format: date-time
              example: "2024-08-07T16:40:03Z"
        comfort:
          type: array
          items:
            type: object
            properties:
              roomId:
                type: integer
                format: int64
                example: 1
              temperatureLevel:
                type: string
                example: COMFY
                description: "known values: COLD, COMFY, WARM, HOT"
              humidityLevel:
                type: string
                example: COMFY
                description: "known values: HUMID, COMFY, DRY"
              coordinate:
                type: object
                properties:
                  radial:
                    type: number
                    format: float
                    example: 0.22
                  angular:
                    type: integer
                    example: 76

    DayReport:
      type: object
      properties:
        zoneType:
          $ref: '#/components/schemas/ZoneType'
        interval:
          type: object
          properties:
            from:
              type: string
              format: date-time
              example: "2024-01-10T22:45:00.000Z"
            to:
              type: string
              format: date-time
              example: "2024-01-11T23:15:00.000Z"
        hoursInDay:
          type: integer
          example: 24
        measuredData:
          properties:
            measuringDeviceConnected:
              type: object
              properties:
                timeSeriesType:
                  type: string
                  example: dataIntervals
                valueType:
                  type: string
                  example: boolean
                dataIntervals:
                  type: array
                  items:
                    type: object
                    properties:
                      from:
                        type: string
                        format: date-time
                        example: "2024-01-10T22:45:00.000Z"
                      to:
                        type: string
                        format: date-time
                        example: "2024-01-11T23:15:00.000Z"
                      value:
                        type: boolean
                        example: true
            insideTemperature:
              type: object
              properties:
                timeSeriesType:
                  type: string
                  example: dataPoints
                valueType:
                  type: string
                  example: temperature
                min:
                  type: object
                  properties:
                    celsius:
                      type: number
                      format: float
                      example: 13.9
                    fahrenheit:
                      type: number
                      format: float
                      example: 57.02
                max:
                  type: object
                  properties:
                    celsius:
                      type: number
                      format: float
                      example: 19.07
                    fahrenheit:
                      type: number
                      format: float
                      example: 66.33
                dataPoints:
                  type: array
                  items:
                    type: object
                    properties:
                      timestamp:
                        type: string
                        format: date-time
                        example: "2024-01-10T22:45:00.000Z"
                      value:
                        type: object
                        properties:
                          celsius:
                            type: number
                            format: float
                            example: 17.3
                          fahrenheit:
                            type: number
                            format: float
                            example: 63.14
            humidity:
              type: object
              properties:
                timeSeriesType:
                  type: string
                  example: dataPoints
                valueType:
                  type: string
                  example: percentage
                percentageUnit:
                  type: string
                  example: UNIT_INTERVAL
                min:
                  type: number
                  format: float
                  example: 0.482
                max:
                  type: number
                  format: float
                  example: 0.613
                dataPoints:
                  type: array
                  items:
                    type: object
                    properties:
                      timestamp:
                        type: string
                        format: date-time
                        example: "2024-01-10T22:45:00.000Z"
                      value:
                        type: number
                        format: float
                        example: 0.482
        stripes:
          type: object
          properties:
            timeSeriesType:
              type: string
              example: dataIntervals
            valueType:
              type: string
              example: stripes
            dataIntervals:
              type: array
              items:
                type: object
                properties:
                  from:
                    type: string
                    format: date-time
                    example: "2024-01-10T22:45:00.000Z"
                  to:
                    type: string
                    format: date-time
                    example: "2024-01-11T18:09:57.008Z"
                  value:
                    type: object
                    properties:
                      stripeType:
                        type: string
                        example: HOME_LOCATION_BASED_CONTROL_OFF
                      setting:
                        $ref: '#/components/schemas/ZoneSetting'

        callForHeat:
          type: object
          properties:
            timeSeriesType:
              type: string
              example: dataIntervals
            valueType:
              type: string
              example: callForHeat
            dataIntervals:
              type: array
              items:
                type: object
                properties:
                  from:
                    type: string
                    format: date-time
                    example: "2024-01-10T22:45:00.000Z"
                  to:
                    type: string
                    format: date-time
                    example: "2024-01-11T18:09:57.008Z"
                  value:
                    type: string
                    example: LOW
                    description: "known values: NONE, LOW, MEDIUM, HIGH"
        hotWaterProduction:
          type: object
          properties:
            timeSeriesType:
              type: string
              example: dataIntervals
            valueType:
              type: string
              example: boolean
            dataIntervals:
              type: array
              items:
                type: object
                properties:
                  from:
                    type: string
                    format: date-time
                    example: "2024-01-10T22:45:00.000Z"
                  to:
                    type: string
                    format: date-time
                    example: "2024-01-11T18:09:57.008Z"
                  value:
                    type: boolean
                    example: true
        weather:
          type: object
          properties:
            condition:
              type: object
              properties:
                timeSeriesType:
                  type: string
                  example: dataIntervals
                valueType:
                  type: string
                  example: weatherCondition
                dataIntervals:
                  type: array
                  items:
                    type: object
                    properties:
                      from:
                        type: string
                        format: date-time
                        example: "2024-01-10T22:45:00.000Z"
                      to:
                        type: string
                        format: date-time
                        example: "2024-01-11T18:09:57.008Z"
                      value:
                        type: object
                        properties:
                          state:
                            type: string
                            example: NIGHT_CLEAR
                            description: "known values: SUN, CLOUDY_PARTLY, CLOUDY_MOSTLY, NIGHT_CLEAR, NIGHT_CLOUDY"
                          temperature:
                            type: object
                            properties:
                              celsius:
                                type: number
                                format: float
                                example: -3.61
                              fahrenheit:
                                type: number
                                format: float
                                example: 25.5
            sunny:
              type: object
              properties:
                timeSeriesType:
                  type: string
                  example: dataIntervals
                valueType:
                  type: string
                  example: weatherCondition
                dataIntervals:
                  type: array
                  items:
                    type: object
                    properties:
                      from:
                        type: string
                        format: date-time
                        example: "2024-01-10T22:45:00.000Z"
                      to:
                        type: string
                        format: date-time
                        example: "2024-01-11T18:09:57.008Z"
                      value:
                        type: boolean
                        example: true
            slots:
              type: object
              properties:
                timeSeriesType:
                  type: string
                  example: slots
                valueType:
                  type: string
                  example: weatherCondition
                slots:
                  type: object
                  properties:
                    '04:00':
                      $ref: '#/components/schemas/WeatherSlot'
                    '08:00':
                      $ref: '#/components/schemas/WeatherSlot'
                    '12:00':
                      $ref: '#/components/schemas/WeatherSlot'
                    '16:00':
                      $ref: '#/components/schemas/WeatherSlot'
                    '20:00':
                      $ref: '#/components/schemas/WeatherSlot'

    DayType:
      type: string
      example: MONDAY_TO_FRIDAY
      # the double empty lines below are intentional, the control the presentation in Swagger UI
      description: >
        known values for timetableType 0 (ONE_DAY) : MONDAY_TO_SUNDAY;


        for timetableType 1 (THREE_DAY): MONDAY_TO_FRIDAY, SATURDAY, SUNDAY; 


        for timetable 2 (SEVEN_DAY): MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY

    Device:
      description: >
        Some of the properties are only available for certain device types. 
        Certain values for some properties are only applicable to certain device types. 
        Wherever device type specific information is known, it is documented. 
        But you cannot count on this information being fully complete.
      allOf:
        - $ref: '#/components/schemas/DeviceBase'
        - properties:
            duties:
              type: array
              items:
                type: string
                example: ZONE_UI
                description: "known values: ZONE_UI (seen for DeviceType SU02, VA02), ZONE_LEADER (seen for DeviceType SU02, VA02), ZONE_DRIVER (seen for DeviceType VA02)"

    DeviceBase:
      type: object
      description: >
        Some of the properties are only available for certain device types. 
        Certain values for some properties are only applicable to certain device types. 
        Wherever device type specific information is known, it is documented. 
        But you cannot count on this information being fully complete.
      properties:
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        serialNo:
          type: string
          example: SU4126033143
        shortSerialNo:
          type: string
          example: SU4126033143
        currentFwVersion:
          type: string
          example: 215.1
        connectionState:
          type: object
          description: "property known to be present for DeviceType SU02, VA02, BR02"
          properties:
            value:
              type: boolean
              example: true
            timestamp:
              type: string
              format: date-time
              example: "2022-11-25T09:40:14.803Z"
        characteristics:
          type: object
          properties:
            capabilities:
              type: array
              description: array known to be empty for DeviceType BR02
              items:
                type: string
                example: INSIDE_TEMPERATURE_MEASUREMENT
                description: "known values: INSIDE_TEMPERATURE_MEASUREMENT (seen for DeviceType SU02, VA02), IDENTIFY (seen for DeviceType SU02, VA02), RADIO_ENCRYPTION_KEY_ACCESS (seen for DeviceType IB01)"
        mountingState:
          type: object
          description: property known to be present for DeviceType VA02
          properties:
            value:
              type: string
              example: CALIBRATED
              description: "known values: CALIBRATED; most probably an enum in the actual API"
            timestamp:
              type: string
              format: date-time
              example: "2022-11-25T09:40:14.803Z"
        mountingStateWithError:
          type: string
          example: CALIBRATED
          description: "property known to be present for DeviceType VA02; known values: CALIBRATED"
        batteryState:
          type: string
          example: NORMAL
          description: "property known to be present for DeviceType SU02, VA02; known values: NORMAL, LOW"
        orientation:
          type: string
          example: HORIZONTAL
          description: "property known to be present for DeviceType VA02; known values: HORIZONTAL, VERTICAL"
        childLockEnabled:
          type: boolean
          example: false
          description: "property known to be present for DeviceType VA02"
        isDriverConfigured:
          type: boolean
          example: true
          description: "property known to be present for DeviceType BR02"
        inPairingMode:
          type: boolean
          example: false
          description: "property known to be present for DeviceType IB01"

    DeviceList:
      type: object
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/DeviceListItem'

    DeviceListItem:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/DeviceType'
        device:
          $ref: '#/components/schemas/DeviceBase'
        zone:
          type: object
          properties:
            discriminator:
              type: integer
              example: 4
              description: a zone ID (a.k.a. room ID)
            duties:
              type: array
              items:
                type: string
                example: UI
                description: "known values: UI (seen for DeviceType SU02)"

    DeviceType:
      type: string
      example: SU02
      description: "known values: BR02 (Wireless Receiver), IB01 (Internet Bridge), SU02 (Wireless Smart Thermostat V3+), VA02 (Smart Radiator Thermostat V3+)"

    EarlyStart:
      type: object
      properties:
        enabled:
          type: boolean
          example: false

    Error:
      type: object
      properties:
        code:
          type: string
          description: meaningful textual code associated with the HTTP status code like 'accessDenied' (for 403) or 'unauthorized' for (401)
        title:
          type: string
          description: detailed description of the error in natural language (english)

    ErrorResponse:
      type: array
      description: error object returned for non-200 responses
      items:
        $ref: '#/components/schemas/Error'

    ErrorResponseZoneType:
      type: array
      description: error object returned for non-200 responses
      items:
        $ref: '#/components/schemas/ErrorZoneType'

    ErrorZoneType:
      type: object
      allOf:
        - $ref: '#/components/schemas/Error'
      properties:
        zoneType:
          type: string
          example: HOT_WATER
          description: "the problematic zone type, known values: HOT_WATER"

    HeatingSystem:
      type: object
      properties:
        boiler:
          type: object
          properties:
            present:
              type: boolean
              example: true
            id:
              type: integer
              example: 2699
            found:
              type: boolean
              example: true
        underfloorHeating:
          type: object
          properties:
            present:
              type: boolean
              example: false

    Home:
      allOf:
        - $ref: '#/components/schemas/HomeBase'
        - properties:
            dateTimeZone:
              type: string
              example: "Europe/London"
            dateCreated:
              type: string
              format: date-time
              example: "2022-11-25T09:40:14.803Z"
            temperatureUnit:
              type: string
              enum: [CELSIUS, FAHRENHEIT]
              example: CELSIUS
            partner:
              #          type: ???
              nullable: true
            simpleSmartScheduleEnabled:
              type: boolean
              example: true
            awayRadiusInMeters:
              type: integer
              example: 400
            installationCompleted:
              type: boolean
              example: true
            incidentDetection:
              type: object
              properties:
                supported:
                  type: boolean
                  example: true
                enabled:
                  type: boolean
                  example: true
            generation:
              type: string
              example: PRE_LINE_X
              description: "known values: PRE_LINE_X"
            zonesCount:
              type: integer
              example: 5
              description: number of zones is this home
            language:
              type: string
              example: nl
            skills:
              type: array
              items:
                type: string
              description: this is assumed to be an array of strings, currently tested set-up returns an empty array
            christmasModeEnabled:
              type: boolean
              example: true
              description: no idea what this means, but would be really interesting to know more...
            showAutoAssistReminders:
              type: boolean
              example: true
            contactDetails:
              type: object
              description: >
                the primary contact for this home; 
                also appears to be the only one to receive any email notifications (like 'low battery' or 'open window' warnings)
              properties:
                name:
                  type: string
                  example: "Kristel"
                email:
                  type: string
                  example: "kristel@example.com"
                phone:
                  type: string
                  example: "+31123456789"
            address:
              type: object
              description: postal address of this home
              properties:
                addressLine1:
                  type: string
                  example: "Kerkstraat 1"
                addressLine2:
                  type: string
                  nullable: true
                zipCode:
                  type: string
                  example: "1234AA"
                city:
                  type: string
                  example: "Utrecht"
                state:
                  type: string
                  nullable: true
                country:
                  type: string
                  description: most probably an ISO 3166-1 alpha-3 country code
                  example: "NLD"
            geolocation:
              type: object
              description: geo location of this home, most probably used to associated weather information with this home
              properties:
                latitude:
                  type: number
                  format: float
                  example: 50.1234567
                longitude:
                  type: number
                  format: float
                  example: -1.1234567
            consentGrantSkippable:
              type: boolean
              example: true
            enabledFeatures:
              type: array
              items:
                type: string
                description: "known values: AA_SETTINGS_AS_WEBVIEW, AA_UPSELLING_A, CLIMATE_REPORT_AS_WEBVIEW, EIQ_SETTINGS_AS_WEBVIEW, HIDE_BOILER_REPAIR_SERVICE, OWD_SETTINGS_AS_WEBVIEW, SMART_SCHEDULE_AS_WEBVIEW"
            isAirComfortEligible:
              type: boolean
              example: true
            isBalanceAcEligible:
              type: boolean
              example: false
            isEnergyIqEligible:
              type: boolean
              example: true,
            isHeatSourceInstalled:
              type: boolean
              example: false
            isBalanceHpEligible:
              type: boolean
              example: false

    HomeBase:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: unique home ID
          example: 1118186
        name:
          type: string
          description: user assigned name for this home
          example: my home

    HomeState:
      type: object
      properties:
        presence:
          type: string
          example: HOME
          description: "known values: HOME"
        presenceLocked:
          type: boolean
          example: true

    MobileDevice:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 8254700
        name:
          type: string
          example: my device
          description: user assigned name for this device
        settings:
          type: object
          properties:
            geoTrackingEnabled:
              type: boolean
              example: false
            specialOffersEnabled:
              type: boolean
              example: true
            onDemandLogRetrievalEnabled:
              type: boolean
              example: false
            pushNotifications:
              type: object
              properties:
                lowBatteryReminder:
                  type: boolean
                  example: true
                awayModeReminder:
                  type: boolean
                  example: true
                homeModeReminder:
                  type: boolean
                  example: true
                openWindowReminder:
                  type: boolean
                  example: true
                energySavingsReportReminder:
                  type: boolean
                  example: true
                incidentDetection:
                  type: boolean
                  example: true
                energyIqReminder:
                  type: boolean
                  example: false
        deviceMetadata:
          type: object
          properties:
            platform:
              type: string
              example: Android
            osVersion:
              type: string
              example: 11
            model:
              type: string
              example: Samsung_SM-T720
            locale:
              type: string
              example: nl

    Power:
      type: string
      # without quotes, ON and OFF are interpreted as boolean values by openapi-generator
      enum: [ 'ON', 'OFF' ]
      example: ON

    PresenceLock:
      type: object
      properties:
        homePresence:
          type: string
          example: AWAY
          description: "known values: HOME, AWAY"

    TimetableBlock:
      type: object
      properties:
        dayType:
          $ref: '#/components/schemas/DayType'
        start:
          type: string
          format: time
          example: "21:00"
          description: start time of this block in 24 hour clock notation
        end:
          type: string
          format: time
          example: "22:00"
          description : end time of this block in 24 hour clock notation
        geolocationOverride:
          type: boolean
        setting:
          $ref: '#/components/schemas/ZoneSetting'

    TimetableType:
      type: object
      properties:
        id:
          type: integer
          example: 0
          description: "known values: 0 (ONE_DAY), 1 (THREE_DAY), 2 (SEVEN_DAY)"
        type:
          type: string
          example: ONE_DAY
          description: "known values: ONE_DAY (0), THREE_DAY (1), SEVEN_DAY (2)"

    User:
      type: object
      properties:
        name:
          type: string
          example: Kristel
        email:
          type: string
          example: kristel@example.org
        username:
          type: string
          example: kristel@example.org
        id:
          type: string
          format: uuid
          description: globally unique user ID
          example: a7c7fc08-e362-4700-e9a1-45a5bded5c124
        locale:
          type: string
          description: language code for the user selected language in the Account settings part of the app
          example: en
        homes:
          type: array
          description: the homes this user is linked to
          items:
            $ref: '#/components/schemas/HomeBase'
        mobileDevices:
          type: array
          items:
            $ref: '#/components/schemas/MobileDevice'

    Weather:
      type: object
      properties:
        solarIntensity:
          type: object
          properties:
            type:
              type: string
              example: PERCENTAGE
            percentage:
              type: number
              example: 0
            timestamp:
              type: string
              format: date-time
              example: "2024-08-04T09:20:08.370Z"
        outsideTemperature:
          type: object
          properties:
            celsius:
              type: number
              format: float
              example: 19.68
            fahrenheit:
              type: number
              format: float
              example: 67.42
            timestamp:
              type: string
              format: date-time
              example: "2024-08-04T09:20:08.370Z"
            type:
              type: string
              example: TEMPERATURE
            precision:
              type: object
              properties:
                celsius:
                  type: number
                  format: float
                  example: 0.01
                fahrenheit:
                  type: number
                  format: float
                  example: 0.01
        weatherState:
          type: object
          properties:
            type:
              type: string
              example: WEATHER_STATE
            value:
              type: string
              example: CLOUDY
            timestamp:
              type: string
              format: date-time
              example: "2024-08-04T09:20:08.370Z"
    WeatherSlot:
      type: object
      description: a WeatherSlot is a sub-element of a DayReport
      properties:
        state:
          type: string
          example: NIGHT_CLEAR
        temperature:
          type: object
          properties:
            celsius:
              type: number
              format: float
              example: -5.21
            fahrenheit:
              type: number
              format: float
              example: 22.78

    Zone:
      type: object
      description: a room in a home whose temperature is controlled by tado
      properties:
        id:
          type: integer
          format: int64
          description: id of the zone (unique within the scope of the home it belongs to)
          example: 2
        name:
          type: string
          description: user assigned name
          example: my living room
        type:
          $ref: '#/components/schemas/ZoneType'
        dateCreated:
          type: string
          format: date-time
          example: "2022-11-25T09:40:14.803Z"
        deviceTypes:
          type: array
          items:
            $ref: '#/components/schemas/DeviceType'
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
        reportAvailable:
          type: boolean
          example: false
        showScheduleSetup:
          type: boolean
          example: true
        supportsDazzle:
          type: boolean
          example: true
        dazzleEnabled:
          type: boolean
          example: true
        dazzleMode:
          type: object
          properties:
            supported:
              type: boolean
              example: true
            enabled:
              type: boolean
              example: true
        openWindowDetection:
          type: object
          properties:
            supported:
              type: boolean
              example: true
            enabled:
              type: boolean
              example: true
            timeoutInSeconds:
              type: integer
              example: 900

    ZoneAwayConfiguration:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ZoneType'
        autoAdjust:
          type: boolean
          example: false
          description: property present for zone type HEATING
        comfortLevel:
          type: string
          nullable: true
          description: property present for zone type HEATING
        setting:
          $ref: '#/components/schemas/ZoneSetting'

    ZoneCapabilities:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ZoneType'
        temperatures:
          type: object
          description: property available for zone type HEATING
          properties:
            celsius:
              type: object
              properties:
                min:
                  type: integer
                  example: 5
                max:
                  type: integer
                  example: 25
                step:
                  type: number
                  format: float
                  example: 0.1
            fahrenheit:
              type: object
              properties:
                min:
                  type: integer
                  example: 41
                max:
                  type: integer
                  example: 77
                step:
                  type: number
                  format: float
                  example: 0.1
        canSetTemperature:
          type: boolean
          example: false
          description: property available for zone type HOT_WATER

    ZoneOverlay:
      type: object
      properties:
        # mandatory for put zone overlay? (not included in post home overlay)
        type:
          type: string
          example: MANUAL
          description: "known values: MANUAL"
        setting:
          $ref: '#/components/schemas/ZoneSetting'
        termination:
          type: object
          properties:
            type:
              type: string
              example: MANUAL
              description: "known values: MANUAL, TADO_MODE"
            typeSkillBasedApp:
              type: string
              example: MANUAL
              description: "known values: MANUAL"
            # TODO
            projectedExpiry:
              nullable: true

    ZoneSetting:
      type: object
      properties:
        power:
          $ref: '#/components/schemas/Power'
        type:
          $ref: '#/components/schemas/ZoneType'
        temperature:
          type: object
          nullable: true
          description: null for a HOT_WATER zone
          properties:
            celsius:
              type: number
              format: float
              example: 14.0
            fahrenheit:
              type: number
              format: float
              example: 57.2

    ZoneState:
      type: object
      properties:
        tadoMode:
          type: string
          example: HOME
          description: "known values: HOME"
        geolocationOverride:
          type: boolean
          example: true
        geolocationOverrideDisableTime:
          #          type: ???
          nullable: true
        preparation:
          #          type: ???
          nullable: true
        setting:
          $ref: '#/components/schemas/ZoneSetting'
        overlayType:
          type: string
          example: MANUAL
          description: "known values: MANUAL"
          nullable: true
        overlay:
          type: object
          nullable: true
          properties:
            type:
              type: string
              example: MANUAL
              description: "known values: MANUAL"
            setting:
              $ref: '#/components/schemas/ZoneSetting'
            termination:
              type: object
              properties:
                type:
                  type: string
                  example: TADO_MODE
                  description: "known values: TADO_MODE"
                typeSkillBasedApp:
                  type: string
                  example: TADO_MODE
                  description: "known values: TADO_MODE"
                projectedExpiry:
                  #                  type: ???
                  nullable: true
            openWindow:
              #                type: ???
              nullable: true
            nextScheduleChange:
              type: object
              nullable: true
              properties:
                start:
                  type: string
                  format: date-time
                setting:
                  $ref: '#/components/schemas/ZoneSetting'
        nextTimeBlock:
          type: object
          properties:
            start:
              type: string
              format: date-time
              example: "2024-07-31T20:00:00.000Z"
        link:
          type: object
          properties:
            state:
              type: string
              example: ONLINE
              description: "known values: ONLINE"
        runningOfflineSchedule:
          type: boolean
          example: false
        activityDataPoints:
          type: object
          description: empty for a HOT_WATER zone
          properties:
            heatingPower:
              type: object
              properties:
                type:
                  type: string
                  example: PERCENTAGE
                  description: "known values: PERCENTAGE"
                percentage:
                  type: number
                  example: 0
                timestamp:
                  type: string
                  format: date-time
                  example: "2024-07-30T21:53:40.294Z"
        sensorDataPoints:
          type: object
          description: empty for a HOT_WATER zone
          properties:
            insideTemperature:
              type: object
              properties:
                celsius:
                  type: number
                  format: float
                  example: 27.97
                fahrenheit:
                  type: number
                  format: float
                  example: 82.35
                timestamp:
                  type: string
                  format: date-time
                  example: "2024-07-30T21:51:41.178Z"
                type:
                  type: string
                  example: "TEMPERATURE"
                  description: "known values: TEMPERATURE"
                precision:
                  type: object
                  properties:
                    celsius:
                      type: number
                      format: float
                      example: 0.1
                    fahrenheit:
                      type: number
                      format: float
                      example: 0.1
            humidity:
              type: object
              properties:
                type:
                  type: string
                  example: PERCENTAGE
                  description: "known values: PERCENTAGE"
                percentage:
                  type: number
                  example: 51
                timestamp:
                  type: string
                  format: date-time
                  example: "2024-07-30T21:51:41.178Z"

    ZoneStates:
      type: object
      properties:
        zoneStates:
          description: a dictionary with zone IDs (a.k.a. room IDs) as keys
          additionalProperties:
            $ref: '#/components/schemas/ZoneState'

    ZoneType:
      type: string
      enum: [AIR_CONDITIONING, HEATING, HOT_WATER]
      example: HEATING

tags:
  - name: user
  - name: mobile device
  - name: home
  - name: home control
  - name: zone
  - name: zone control
  - name: device
  - name: report