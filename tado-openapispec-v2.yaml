openapi: 3.0.0
info:
  title: tado API v2
  description: |
    Community managed API specification for the tado smart thermostat solution 
    (this specification is not officially supported or published by tado).
    
    Github repository where this specification is maintained: 
    [https://github.com/kritsel/tado-openapispec-v2](https://github.com/kritsel/tado-openapispec-v2)
  version: 2.2024.08.16.3
servers:
  - url: https://my.tado.com/api/v2/
security:
  - oauth2: [] # no scopes

paths:
  ####################################################################################################################
  # user paths

  /me:
    get:
      summary: Returns information about the authenticated user, (summary) information of their home(s) and mobile devices.
      operationId: getMe # hint for client code generators
      tags:
        - user
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized401'

  /homes/{homeId}/users:
    get:
      summary: Get all users associated with the provided homeId.
      operationId: getUsers # hint for client code generators
      tags:
        - user
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  ####################################################################################################################
  # mobile device paths
  /homes/{homeId}/mobileDevices:
    get:
      summary: Get all mobile devices associated with the provided homeId
      operationId: getMobileDevices # hint for client code generators
      tags:
        - mobile device
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MobileDevice'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/mobileDevices/{mobileDeviceId}:
    get:
      summary: Get a specific mobile device associated with the provided homeId
      operationId: getMobileDevice # hint for client code generators
      tags:
        - mobile device
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: mobileDeviceId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a mobile device
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDevice'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
    delete:
      summary: Remove the relationship between a mobile device and a home
      operationId: deleteMobileDeviceFromHome # hint for client code generators
      tags:
        - mobile device
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            pattern: "application/json"
            example: "application/json"
          required: true
          description: a 'Content-Type' header with value 'application/json' is mandatory for this specific endpoint
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: mobileDeviceId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a mobile device
      responses:
        '200':
          description: successful response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  /homes/{homeId}/mobileDevices/{mobileDeviceId}/settings:
    get:
      summary: Get the settings for a specific mobile device which is associated with the given home
      operationId: getMobileDeviceSettings # hint for client code generators
      tags:
        - mobile device
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: mobileDeviceId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a mobile device
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDeviceSettings'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
    put:
      summary: Update the settings for a specific mobile device which is associated with the given home
      operationId: putMobileDeviceSettings # hint for client code generators
      tags:
        - mobile device
      parameters:
        - in: header
          name: Content-Type
          schema:
            type: string
            pattern: "application/json"
            example: "application/json"
          required: true
          description: a 'Content-Type' header with value 'application/json' is mandatory for this specific endpoint
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: mobileDeviceId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of a mobile device
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileDeviceSettings'
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDeviceSettings'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  ####################################################################################################################
  # home paths
  /homes/{homeId}:
    get:
      summary: Get full details of a single home.
      description: Use `GET /me` to determine the `homeId` of your home
      operationId: getHome # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Home'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/airComfort:
    get:
      summary: Get humidity and temperature indicators for all zones (rooms) in this home
      description: "'Climate comfort' element in the app"
      operationId: getAirComfort # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AirComfort'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/details:
    put:
      summary: Set home details for this home
      operationId: putHomeDetails # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HomeDetails'
      responses:
        '204':
          description: successful response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/heatingCircuits:
    get:
      summary: Get information about the heating circuits of this home
      operationId: getHeatingCircuits # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HeatingCircuit'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/heatingSystem:
    get:
      summary: Get information about the presence of various heating systems in this home
      operationId: getHeatingSystem # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HeatingSystem'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/heatingSystem/boiler:
    put:
      summary: Update information about the boiler of this home
      operationId: putHeatingSystemBoiler # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Boiler'
      responses:
        '204':
          description: successful response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/heatingSystem/underfloorHeating:
    put:
      summary: Update information about the underfloor heating of this home
      operationId: putUnderfloorHeating # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UnderfloorHeating'
      responses:
        '204':
          description: successful response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/incidentDetection:
    get:
      summary: Get the value of the incidentDetection setting for this home
      operationId: getIncidentDetection # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentDetection'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
    put:
      summary: Set the value of the incidentDetection setting for this home
      operationId: putIncidentDetection # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IncidentDetectionInput'
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncidentDetection'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/weather:
    get:
      summary: Get the current weather for the given home
      operationId: getWeather # hint for client code generators
      tags:
        - home
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weather'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  ####################################################################################################################
  # home control paths

  /homes/{homeId}/overlay:
    post:
      summary: Control the overlays (manual override of the configured schedule) of multiple rooms (a.k.a. zones) with a single API method
      description: >
        Used in app feature: Home page > Turn OFF All Rooms
      operationId: postZoneOverlays # hint for client code generators
      tags:
        - home control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OverlayInput'
      responses:
        '204':
          description: successful empty response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '422':
          $ref: '#/components/responses/InputError422'
    delete:
      summary: Remove the overlays (manual override of the configured schedule) of multiple rooms (a.k.a. zones) with a single API method
      description: >
        Used in app feature: Home page > Resume Schedule All Rooms
      operationId: deleteZoneOverlays # hint for client code generators
      tags:
        - home control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: query
          name: rooms
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ZoneId'
          required: true
          description: list of zone IDs whose overlay should be removed (do not include a HOT_WATER zone ID)
      responses:
        '204':
          description: successful empty response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/presenceLock:
    put:
      summary: Specify whether someone at home or not
      operationId: putHomePresenceLock # hint for client code generators
      tags:
        - home control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresenceLock'
      responses:
        '204':
          description: successful empty response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '422': # verify
          $ref: '#/components/responses/InputError422'

  /homes/{homeId}/state:
    get:
      summary: Get information about the presence state of the home
      operationId: getHomeState # hint for client code generators
      tags:
        - home control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HomeState'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  ####################################################################################################################
  # zone  paths
  /homes/{homeId}/zones:
    get:
      summary: Get all zones (a.k.a. rooms) associated with the provided homeId.
      description: >
        Includes full information of the tado devices present in each zone. 
        The response does not include any device of DeviceType `IB01` (Internet Bridge);
        use `/homes/{homeId}/devices` instead.
        
        
        Used in app feature: Home page
      operationId: getZones # hint for client code generators
      tags:
        - zone
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Zone'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/zones/{zoneId}/capabilities:
    get:
      summary: Get the temperature setting capabilities of this zone
      description: This includes current temperature, humidity and heating power information.
      operationId: getZoneCapabilities # hint for client code generators
      tags:
        - zone
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneCapabilities'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  /homes/{homeId}/zones/{zoneId}/state:
    get:
      summary: Get the current state details of a zone (a.k.a. room).
      description: >
        This includes current temperature, humidity and heating power information.
        
        Used in app feature: Home page > a room tile
      operationId: getZoneState # hint for client code generators
      tags:
        - zone
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneState'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  /homes/{homeId}/zoneStates:
    get:
      summary: Get zone state details of every zone (a.k.a. room) in the specified home
      # double empty lines are intentional
      description: >
        This includes current temperature, humidity and heating power information.
        
        
        Used in app feature: Home page
      operationId: getZoneStates # hint for client code generators
      tags:
        - zone
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneStates'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  ####################################################################################################################
  # zone control paths

  /homes/{homeId}/zones/{zoneId}/earlyStart:
    get:
      summary: Control whether Tado makes sure a set temperature is reached at the start of a block
      operationId: getZoneEarlyStart # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarlyStart'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'
        '422':
          $ref: '#/components/responses/UnsupportedForZoneType422'
    put:
      summary: Control whether Tado makes sure a set temperature is reached at the start of a block
      operationId: putZoneEarlyStart # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EarlyStart'
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EarlyStart'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'
        '422':
          $ref: '#/components/responses/UnsupportedForZoneType422'

  /homes/{homeId}/zones/{zoneId}/overlay:
    get:
      summary: Get the overlay (manual override of the configured temperature schedule) of the given zone (a.k.a. room)
      operationId: getZoneOverlay # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Overlay'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404' # when the zone does not exist of there is no overlay for this zone
    put:
      summary: Set the overlay (manual override of the configured temperature schedule) for the given zone (a.k.a. room)
      operationId: putZoneOverlay # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OverlayInput'
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Overlay'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '422':
          $ref: '#/components/responses/InputError422'
    delete:
      summary: Remove the overlay (manual override of the configured temperature schedule) for the given zone (a.k.a. room)
      operationId: deleteZoneOverlay # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '204':
          description: successful empty response
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/zones/{zoneId}/schedule/awayConfiguration:
    get:
      summary: Get the settings to use for the given zone (a.k.a. room) when everyone is out of the house
      operationId: getZoneAwayConfiguration # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZoneAwayConfiguration'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/zones/{zoneId}/schedule/activeTimetable:
    get:
      summary: Get the active timetable type for the given zone (a.k.a. room)
      operationId: getZoneActiveTimetable # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimetableType'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/zones/{zoneId}/schedule/timetables:
    get:
      summary: Get the available timetable types
      operationId: getZoneTimetables # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                description: all available timetable types
                items:
                  $ref: '#/components/schemas/TimetableType'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/zones/{zoneId}/schedule/timetables/{timetableTypeId}:
    get:
      summary: Get the timetable type for the given timetable type ID
      operationId: getZoneTimetable # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
        - in: path
          name: timetableTypeId
          schema:
            type: integer
          required: true
          example: 1
          description: ID of a timetable type
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimetableType'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  /homes/{homeId}/zones/{zoneId}/schedule/timetables/{timetableTypeId}/blocks:
    get:
      summary: Get the user defined timetable blocks for the given zoneId and given timetableId.
      # the double empty lines below are intentional, they control the layout in Swagger UI.
      description: >
        For each zone you can define three different timetables, where each timetable is identified by a timetable type: 
        
        * ONE_DAY (the same schedule for every day of the week),
        
        * THREE_DAY (the same schedule for weekdays, and a separate schedule for saturday and sunday) and
        
        * SEVEN_DAY (a different schedule for each day of the week).
        
        
        Only one of these timetables can be active at any one time 
        (see `/homes/{homeId}/zones/{zoneId}/schedule/activeTimetable`).
        
        
        Each timetable for a timetable type consists of an array of blocks.
        Each block consists of a day type (e.g. MONDAY_TO_FRIDAY for the THREE_DAY timetable type), a start time and end time 
        and the setting (e.g. temperature) for that time period.
      operationId: getZoneTimetableBlocks # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
        - in: path
          name: timetableTypeId
          schema:
            $ref: '#/components/schemas/TimetableTypeId'
          required: true
          example: 1
          description: ID of a timetable type
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimetableBlock'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  /homes/{homeId}/zones/{zoneId}/schedule/timetables/{timetableTypeId}/blocks/{dayType}:
    get:
      summary: Get the user defined timetable blocks for the given zoneId, timetableId and dayType
      # the double empty lines below are intentional, they control the layout in Swagger UI.
      description: >
        For each zone you can define three different timetables, where each timetable is identified by a timetable type: 

        * ONE_DAY (the same schedule for every day of the week),

        * THREE_DAY (the same schedule for weekdays, and a separate schedule for saturday and sunday) and

        * SEVEN_DAY (a different schedule for each day of the week).


        Only one of these timetables can be active at any one time 
        (see `/homes/{homeId}/zones/{zoneId}/schedule/activeTimetable`).


        Each timetable for a timetable type consists of an array of blocks.
        Each block consists of a day type (e.g. MONDAY_TO_FRIDAY for the THREE_DAY timetable type), a start time and end time 
        and the setting (e.g. temperature) for that time period.
      operationId: getZoneTimetableBlocksByDayType # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
        - in: path
          name: timetableTypeId
          schema:
            $ref: '#/components/schemas/TimetableTypeId'
          required: true
          example: 1
          description: ID of a timetable type
        - in: path
          name: dayType
          schema:
            $ref: '#/components/schemas/DayType'
          required: true
          example: MONDAY_TO_FRIDAY
          description: name of a day type
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimetableBlock'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'
    put:
      summary: Update the timetable (containing all blocks!) for the given zoneId, timetableId and dayType
      operationId: putZoneTimetableBlocks # hint for client code generators
      tags:
        - zone control
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
        - in: path
          name: timetableTypeId
          schema:
            $ref: '#/components/schemas/TimetableTypeId'
          required: true
          example: 1
          description: ID of a timetable type
        - in: path
          name: dayType
          schema:
            $ref: '#/components/schemas/DayType'
          required: true
          example: MONDAY_TO_FRIDAY
          description: name of a day type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TimetableBlock'
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TimetableBlock'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'

  ####################################################################################################################
  # device paths
  /homes/{homeId}/devices:
    get:
      summary: Get all tado devices associated with the provided homeId.
      # the float blank lines int the description are intentional, to force a new line in the rendered text on Swagger UI
      description: >
        The device information included in the response for `/homes/{homeId}/zones` and `/homes/{homeId}/zones/{zoneId}`
        includes the `duties` property, while the response for this path does not. 
        
        
        The response for this path does include devices of DeviceType `IB01` (Internet Bridge), 
        while the responses for the zone related paths do not.
      operationId: getDevices # hint for client code generators
      tags:
        - device
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceBase'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/devices/{deviceId}/identify:
    post:
      summary: Instruct the device to say 'hi' on their display
      operationId: identifyDevice # hint for client code generators
      tags:
        - device
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: deviceId
          schema:
            type: string
          required: true
          description: the `shortSerialNo` of a device
      responses:
        '200':
          description: successful response; response body is empty, but response statuscode is 200 and not 204
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  /homes/{homeId}/deviceList:
    get:
      summary: Get all tado devices associated with the provided homeId, together with the zone (a.k.a. room) they are in
      operationId: getDeviceList # hint for client code generators
      tags:
        - device
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeviceList'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'

  ####################################################################################################################
  # report paths

  /homes/{homeId}/zones/{zoneId}/dayReport:
    get:
      summary: Get historic information for a particular day
      operationId: getZoneDayReport # hint for client code generators
      tags:
        - report
      parameters:
        - in: path
          name: homeId
          schema:
            $ref: '#/components/schemas/HomeId'
          required: true
          description: unique ID of a home
        - in: path
          name: zoneId
          schema:
            $ref: '#/components/schemas/ZoneId'
          required: true
          description: ID of a zone (unique within a home)
        - in: query
          name: date
          schema:
            type: string
            format: date
          required: true
          example: "2018-02-14"
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DayReport'
        '401':
          $ref: '#/components/responses/Unauthorized401'
        '403':
          $ref: '#/components/responses/AccessDenied403'
        '404':
          $ref: '#/components/responses/NotFound404'


components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        password:
          tokenUrl: https://auth.tado.com/oauth/token
          scopes: {}

  responses:
    Unauthorized401:
      description: unauthorized, invalid access token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    AccessDenied403:
      description: access denied, the authenticated user does not have access to the specified resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound404:
      description: not found, the specified resource does not exist
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InputError422:
      description: the request body contains errors (e.g. a required property is missing)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnsupportedForZoneType422:
      description: the requested operation is not supported for the zone type of the specified zone
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponseZoneType'

  schemas:
    # AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
    AirComfort:
      type: object
      description: result of /homes/{homeId}/airComfort
      properties:
        freshness:
          type: object
          properties:
            value:
              $ref: '#/components/schemas/AirFreshness'
            lastOpenWindow:
              type: string
              format: date-time
              example: "2024-08-07T16:40:03Z"
        comfort:
          type: array
          items:
            type: object
            properties:
              roomId:
                $ref: '#/components/schemas/ZoneId'
              temperatureLevel:
                $ref: '#/components/schemas/TemperatureLevel'
              humidityLevel:
                $ref: '#/components/schemas/HumidityLevel'
              coordinate:
                type: object
                properties:
                  radial:
                    type: number
                    format: float
                    example: 0.22
                  angular:
                    type: integer
                    example: 76

    AirConditioningZoneSettings:
      type: object
      description: used in ZoneCapabilities for zones of type AIR_CONDITIONING
      allOf:
        - $ref: '#/components/schemas/AirConditioningZoneSettingsBase'
        - properties:
            temperature:
              $ref: '#/components/schemas/Temperature'

    AirConditioningZoneSettingsBase:
      type: object
      description: used in ZoneCapabilities for zones of type AIR_CONDITIONING
      properties:
        fanLevel:
          $ref: '#/components/schemas/FanLevel'
        verticalSwing:
          $ref: '#/components/schemas/VerticalSwing'
        horizontalSwing:
          $ref: '#/components/schemas/HorizontalSwing'
        light:
          $ref: '#/components/schemas/Light'

    AirConditioningMode:
      type: string
      enum: [AUTO, COOL, HEAT, DRY, FAN]
      example: COOL


    AirConditioningModeCapabilities:
      type: object
      description: used in ZoneCapabilities for zones of type AIR_CONDITIONING
      allOf:
        - $ref: '#/components/schemas/AirConditioningModeCapabilitiesBase'
        - properties:
            temperatures:
              $ref: '#/components/schemas/TemperatureCapability'

    AirConditioningModeCapabilitiesBase:
      type: object
      description: used in ZoneCapabilities for zones of type AIR_CONDITIONING
      properties:
        fanLevel:
          type: array
          items:
            $ref: '#/components/schemas/FanLevel'
        verticalSwing:
          type: array
          items:
            $ref: '#/components/schemas/VerticalSwing'
        horizontalSwing:
          type: array
          items:
            $ref: '#/components/schemas/HorizontalSwing'
        light:
          type: array
          items:
            $ref: '#/components/schemas/Light'

    AirFreshness:
      type: string
      enum: [FRESH, FAIR]
      example: FRESH
      description: used in AirComfort

    # BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
    BatteryState:
      type: string
      enum: [LOW, NORMAL]
      example: NORMAL
      description: device property known to be present for DeviceType SU02, VA02

    Boiler:
      type: object
      description: element of HeatingSystem
      properties:
        present:
          type: boolean
          example: true
        id:
          type: integer
          example: 2699
        found:
          type: boolean
          example: true

    BooleanDataInterval:
      type: object
      description: element of DayReport
      allOf:
        - $ref: '#/components/schemas/DataInterval'
        - properties:
            value:
              type: boolean
              example: true

    # CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC
    CallForHeatTimeSeries:
      type: object
      description: element of DayReport
      properties:
        timeSeriesType:
          type: string
          example: dataIntervals
        valueType:
          type: string
          example: callForHeat
        dataIntervals:
          type: array
          items:
            $ref: '#/components/schemas/CallForHeatDataInterval'

    CallForHeatDataInterval:
      type: object
      description: element of DayReport
      allOf:
        - $ref: '#/components/schemas/DataInterval'
        - properties:
            value:
              $ref: '#/components/schemas/CallForHeatValue'

    CallForHeatValue:
      type: string
      enum: [ NONE, LOW, MEDIUM, HIGH]
      example: LOW
      description: element of DayReport

    # DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
    DataInterval:
      type: object
      description: element of a DayReport
      properties:
        from:
          type: string
          format: date-time
          example: "2024-01-10T22:45:00.000Z"
        to:
          type: string
          format: date-time
          example: "2024-01-11T23:15:00.000Z"

    DayReport:
      type: object
      description: result of /homes/{homeId}/zones/{zoneId}/dayReport
      properties:
        zoneType:
          $ref: '#/components/schemas/ZoneType'
        interval:
          type: object
          properties:
            from:
              type: string
              format: date-time
              example: "2024-01-10T22:45:00.000Z"
            to:
              type: string
              format: date-time
              example: "2024-01-11T23:15:00.000Z"
        hoursInDay:
          type: integer
          example: 24
        measuredData:
          properties:
            measuringDeviceConnected:
              $ref: '#/components/schemas/MeasuringDeviceConnectedTimeSeries'
            insideTemperature:
              $ref: '#/components/schemas/InsideTemperatureTimeSeries'
            humidity:
              $ref: '#/components/schemas/HumidityTimeSeries'
        stripes:
          $ref: '#/components/schemas/StripesTimeSeries'
        callForHeat:
          $ref: '#/components/schemas/CallForHeatTimeSeries'
        hotWaterProduction:
          $ref: '#/components/schemas/HotWaterProductionTimeSeries'
        weather:
          type: object
          properties:
            condition:
              $ref: '#/components/schemas/WeatherConditionTimeSeries'
            sunny:
              $ref: '#/components/schemas/SunnyTimeSeries'
            slots:
              type: object
              properties:
                timeSeriesType:
                  type: string
                  example: slots
                valueType:
                  type: string
                  example: weatherCondition
                slots:
                  type: object
                  properties:
                    '04:00':
                      $ref: '#/components/schemas/WeatherSlot'
                    '08:00':
                      $ref: '#/components/schemas/WeatherSlot'
                    '12:00':
                      $ref: '#/components/schemas/WeatherSlot'
                    '16:00':
                      $ref: '#/components/schemas/WeatherSlot'
                    '20:00':
                      $ref: '#/components/schemas/WeatherSlot'

    DayType:
      type: string
      enum: [MONDAY_TO_SUNDAY, MONDAY_TO_FRIDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY]
      example: MONDAY_TO_FRIDAY
      description: >
        used in timetables
        
        
        applicable values: 

        * for timetableType 0 (ONE_DAY) : MONDAY_TO_SUNDAY

        * for timetableType 1 (THREE_DAY): MONDAY_TO_FRIDAY, SATURDAY, SUNDAY

        * for timetableType 2 (SEVEN_DAY): MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY

    Device:
      description: >
        A piece of tado hardware.
        
        
        Some of the properties are only available for certain device types. 
        Certain values for some properties are only applicable for certain device types. 
        Wherever device type specific information is known, it is documented. 
        But you cannot count on this information being fully complete.
      allOf:
        - $ref: '#/components/schemas/DeviceBase'
        - properties:
            duties:
              type: array
              items:
                type: string
                example: ZONE_UI
                description: >
                  known values: 
                  
                  * ZONE_UI (seen for DeviceType SU02, VA02)
                  
                  * ZONE_LEADER (seen for DeviceType SU02, VA02)
                  
                  * ZONE_DRIVER (seen for DeviceType VA02)

    DeviceBase:
      type: object
      description: >
        A piece of tado hardware
        
        
        Some of the properties are only available for certain device types. 
        Certain values for some properties are only applicable to certain device types. 
        Wherever device type specific information is known, it is documented. 
        But you cannot count on this information being fully complete.
      properties:
        deviceType:
          $ref: '#/components/schemas/DeviceType'
        serialNo:
          type: string
          example: SU4126033143
        shortSerialNo:
          type: string
          example: SU4126033143
        currentFwVersion:
          type: string
          example: 215.1
        connectionState:
          type: object
          description: "property known to be present for DeviceType SU02, VA02, BR02"
          properties:
            value:
              type: boolean
              example: true
            timestamp:
              type: string
              format: date-time
              example: "2022-11-25T09:40:14.803Z"
        characteristics:
          type: object
          properties:
            capabilities:
              type: array
              description: array known to be empty for DeviceType BR02
              items:
                type: string
                example: INSIDE_TEMPERATURE_MEASUREMENT
                description: >
                  known values: 
                  
                  * INSIDE_TEMPERATURE_MEASUREMENT (seen for DeviceType SU02, VA02)
                  
                  * IDENTIFY (seen for DeviceType SU02, VA02)
                  
                  * RADIO_ENCRYPTION_KEY_ACCESS (seen for DeviceType IB01)
        mountingState:
          type: object
          description: property known to be present for DeviceType VA02
          properties:
            value:
              type: string
              example: CALIBRATED
              description: >
                known values: 
                
                * CALIBRATED
            timestamp:
              type: string
              format: date-time
              example: "2022-11-25T09:40:14.803Z"
        mountingStateWithError:
          type: string
          example: CALIBRATED
          description: "property known to be present for DeviceType VA02; known values: CALIBRATED"
        batteryState:
          $ref: '#/components/schemas/BatteryState'
        orientation:
          $ref: '#/components/schemas/Orientation'
        childLockEnabled:
          type: boolean
          example: false
          description: "property known to be present for DeviceType VA02"
        isDriverConfigured:
          type: boolean
          example: true
          description: "property known to be present for DeviceType BR02"
        inPairingMode:
          type: boolean
          example: false
          description: "property known to be present for DeviceType IB01"

    DeviceList:
      type: object
      description: result of /homes/{homeId}/zones/{zoneId}/deviceList
      properties:
        entries:
          type: array
          items:
            $ref: '#/components/schemas/DeviceListItem'

    DeviceListItem:
      type: object
      description: element of DeviceList
      properties:
        type:
          $ref: '#/components/schemas/DeviceType'
        device:
          $ref: '#/components/schemas/DeviceBase'
        zone:
          type: object
          properties:
            discriminator:
              $ref: '#/components/schemas/ZoneId'
            duties:
              type: array
              items:
                type: string
                example: UI
                description: >
                  known values: 
                  
                  * UI (seen for DeviceType SU02)"

    DeviceType:
      type: string
      example: SU02
      description: >
        data element of Device
        
        
        known values: 
        
        * BR02 (Wireless Receiver)
        
        * IB01 (Internet Bridge)
        
        * SU02 (Wireless Smart Thermostat V3+)
        
        * VA02 (Smart Radiator Thermostat V3+)

    # EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE
    EarlyStart:
      type: object
      properties:
        enabled:
          type: boolean
          example: false

    Error:
      type: object
      properties:
        code:
          type: string
          description: meaningful textual code associated with the HTTP status code like 'accessDenied' (for 403) or 'unauthorized' for (401)
        title:
          type: string
          description: detailed description of the error in natural language (english)

    ErrorResponse:
      type: array
      description: error object returned for non-200 responses
      items:
        $ref: '#/components/schemas/Error'

    ErrorResponseZoneType:
      type: array
      description: error object returned for non-200 responses
      items:
        $ref: '#/components/schemas/ErrorZoneType'

    ErrorZoneType:
      type: object
      allOf:
        - $ref: '#/components/schemas/Error'
        - properties:
            zoneType:
              $ref: '#/components/schemas/ZoneType'

    # FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FanLevel:
      type: string
      enum: [AUTO, LEVEL1, LEVEL2, LEVEL3, LEVEL4, LEVEL5, SILENT]
      description: Used in AirConditioningCapabilities

    # HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH
    HeatingCircuit:
      type: object
      description: >
        Result of /homes/{homeId}/heatingCircuits
        
        
        A tado device which controls a heating circuit
      properties:
        number:
          type: integer
          example: 1
        driverSerialNo:
          type: string
          example: BR3209250550
          description: driverSerialNo of a tado device present in the home
        driverShortSerialNo:
          type: string
          example: BR3209250550
          description: driverShortSerialNo of a tado device present in the home

    HeatingSystem:
      type: object
      description: result of /homes/{homeId}/heatingSystem
      properties:
        boiler:
          $ref: '#/components/schemas/Boiler'
        underfloorHeating:
          $ref: '#/components/schemas/UnderfloorHeating'

    Home:
      description: A home controlled by tado. Result of /homes
      allOf:
        - $ref: '#/components/schemas/HomeDetails'
        - properties:
            dateTimeZone:
              type: string
              example: "Europe/Amsterdam"
            dateCreated:
              type: string
              format: date-time
              example: "2022-11-25T09:40:14.803Z"
            temperatureUnit:
              type: string
              enum: [CELSIUS, FAHRENHEIT]
              example: CELSIUS
            partner:
              #          type: ???
              nullable: true
            simpleSmartScheduleEnabled:
              type: boolean
              example: true
            awayRadiusInMeters:
              type: integer
              example: 400
            installationCompleted:
              type: boolean
              example: true
            incidentDetection:
              $ref: '#/components/schemas/IncidentDetection'
            generation:
              type: string
              example: PRE_LINE_X
              description: >
                known values:
                
                * PRE_LINE_X
            zonesCount:
              type: integer
              example: 5
              description: number of zones is this home
            language:
              type: string
              example: nl
            skills:
              type: array
              items:
                type: string
              description: this is assumed to be an array of strings, currently tested set-up returns an empty array
            christmasModeEnabled:
              type: boolean
              example: true
              description: no idea what this means, but would be really interesting to know more...
            showAutoAssistReminders:
              type: boolean
              example: true
            consentGrantSkippable:
              type: boolean
              example: true
            enabledFeatures:
              type: array
              items:
                type: string
                description: >
                  known values: 
                  
                  * AA_SETTINGS_AS_WEBVIEW
                  
                  * AA_UPSELLING_A
                  
                  * CLIMATE_REPORT_AS_WEBVIEW
                  
                  * EIQ_SETTINGS_AS_WEBVIEW
                  
                  * ELIGIBLE_FOR_ENERGY_CONSUMPTION
                  
                  * ENERGY_CONSUMPTION
                  
                  * HIDE_BOILER_REPAIR_SERVICE
                  
                  * HOME_SCREEN_AS_WEBVIEW_PROD
                  
                  * HOME_SCREEN_AS_WEBVIEW_PROD_ANDROID
                  
                  * OWD_SETTINGS_AS_WEBVIEW
                  
                  * ROOMS_AND_DEVICES_SETTING_AS_WEBVIEW
                  
                  * SMART_SCHEDULE_AS_WEBVIEW

            isAirComfortEligible:
              type: boolean
              example: true
            isBalanceAcEligible:
              type: boolean
              example: false
            isEnergyIqEligible:
              type: boolean
              example: true,
            isHeatSourceInstalled:
              type: boolean
              example: false
            isBalanceHpEligible:
              type: boolean
              example: false

    HomeBase:
      type: object
      description: basic home information which is present in the User component
      properties:
        id:
          $ref: '#/components/schemas/HomeId'
        name:
          type: string
          description: user assigned name for this home
          example: my home

    HomeDetails:
      description: Part of the Home component. And used in PUT /homes/{homeId}/homeDetails
      allOf:
        - $ref: '#/components/schemas/HomeBase'
        - properties:
            contactDetails:
              type: object
              description: >
                the primary contact for this home; 
                also appears to be the only one to receive any email notifications (like 'low battery' or 'open window' warnings)
              properties:
                name:
                  type: string
                  example: "Kristel"
                email:
                  type: string
                  example: "kristel@example.com"
                phone:
                  type: string
                  example: "+31123456789"
            address:
              type: object
              description: postal address of this home
              properties:
                addressLine1:
                  type: string
                  example: "Kerkstraat 1"
                addressLine2:
                  type: string
                  nullable: true
                zipCode:
                  type: string
                  example: "1234AA"
                city:
                  type: string
                  example: "Utrecht"
                state:
                  type: string
                  nullable: true
                country:
                  type: string
                  description: most probably an ISO 3166-1 alpha-3 country code
                  example: "NLD"
            geolocation:
              type: object
              description: geo location of this home, most probably used to associated weather information with this home
              properties:
                latitude:
                  type: number
                  format: float
                  example: 50.1234567
                longitude:
                  type: number
                  format: float
                  example: -1.1234567

    HomeId:
      type: integer
      format: int64
      example: 1118186
      description: unique home ID

    HomePresence:
      type: string
      enum: [HOME, AWAY]
      example: HOME

    HomeState:
      type: object
      description: >
        Indicates if tado acts as if there are people present in the home or not. Result of /homes/{homeId}/state.
        
        Presence can be auto-determined by tado based on geo-fencing (when enabled via a tado subscription),
        or can be manually set by a user.
      properties:
        presence:
          $ref: '#/components/schemas/HomePresence'
        presenceLocked:
          type: boolean
          example: true

    HorizontalSwing:
      type: string
      # quotes are necessary;
      # without it ON and OFF are interpreted as boolean values by the yaml-to-json converter used by openapi-generator
      enum: [ 'OFF', 'ON', 'RIGHT', 'LEFT', 'MID_RIGHT', 'MID_LEFT']
      description: Used in AirConditioningCapabilities

    HotWaterProductionTimeSeries:
      type: object
      description: element of DayReport
      properties:
        timeSeriesType:
          type: string
          example: dataIntervals
        valueType:
          type: string
          example: boolean
        dataIntervals:
          type: array
          items:
            $ref: '#/components/schemas/BooleanDataInterval'

    HumidityLevel:
      type: string
      enum:  [HUMID, COMFY, DRY]
      example: DRY
      description: element of AirComfort

    HumidityTimeSeries:
      type: object
      description: element of DayReport
      properties:
        timeSeriesType:
          type: string
          example: dataPoints
        valueType:
          type: string
          example: percentage
        percentageUnit:
          type: string
          example: UNIT_INTERVAL
        min:
          type: number
          format: float
          example: 0.482
        max:
          type: number
          format: float
          example: 0.613
        dataPoints:
          type: array
          items:
            $ref: '#/components/schemas/PercentageDataPoint'

    # IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
    IncidentDetection:
      type: object
      description: Data elements of a Home. And used in /homes/{homeId}/incidentDetection
      properties:
        enabled:
          type: boolean
          example: true
        supported:
          type: boolean
          example: true

    IncidentDetectionInput:
      type: object
      description: Used in /homes/{homeId}/incidentDetection
      properties:
        enabled:
          type: boolean
          example: true

    InsideTemperatureTimeSeries:
      type: object
      description: element of DayReport
      properties:
        timeSeriesType:
          type: string
          example: dataPoints
        valueType:
          type: string
          example: temperature
        min:
          $ref: '#/components/schemas/Temperature'
        max:
          $ref: '#/components/schemas/Temperature'
        dataPoints:
          type: array
          items:
            $ref: '#/components/schemas/TemperatureDataPoint'

    # LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL
    Light:
      type: string
      # quotes are necessary;
      # without it ON and OFF are interpreted as boolean values by the yaml-to-json converter used by openapi-generator
      enum: [ 'OFF', 'ON' ]
      description: Used in AirConditioningCapabilities

    # MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
    MeasuringDeviceConnectedTimeSeries:
      type: object
      description: element of DayReport
      properties:
        timeSeriesType:
          type: string
          example: dataIntervals
        valueType:
          type: string
          example: boolean
        dataIntervals:
          type: array
          items:
            $ref: '#/components/schemas/BooleanDataInterval'

    MobileDevice:
      type: object
      description: >
        A phone/tablet/iPad which has the tado app installed, belonging to a particular user 
        who is a member/resident of a home controlled by tado.
      properties:
        id:
          type: integer
          format: int64
          example: 8254700
        name:
          type: string
          example: my device
          description: user assigned name for this device
        settings:
          $ref: '#/components/schemas/MobileDeviceSettings'
        deviceMetadata:
          type: object
          properties:
            platform:
              type: string
              example: Android
            osVersion:
              type: string
              example: 11
            model:
              type: string
              example: Samsung_SM-T720
            locale:
              type: string
              example: nl

    MobileDeviceSettings:
      type: object
      description: Data element of a MobileDevice. And used in /homes/{homeId}/mobileDevices/{mobileDeviceId}/settings.
      properties:
        geoTrackingEnabled:
          type: boolean
          example: false
        specialOffersEnabled:
          type: boolean
          example: true
        onDemandLogRetrievalEnabled:
          type: boolean
          example: false
        pushNotifications:
          type: object
          properties:
            lowBatteryReminder:
              type: boolean
              example: true
            awayModeReminder:
              type: boolean
              example: true
            homeModeReminder:
              type: boolean
              example: true
            openWindowReminder:
              type: boolean
              example: true
            energySavingsReportReminder:
              type: boolean
              example: true
            incidentDetection:
              type: boolean
              example: true
            energyIqReminder:
              type: boolean
              example: false

    # OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
    Orientation:
      type: string
      enum: [HORIZONTAL, VERTICAL]
      example: HORIZONTAL
      description: tado device property known to be present for DeviceType VA02

    Overlay:
      type: object
      description: >
        An overlay is a user controlled override for the user defined scheduled settings of zone.
        As long as an overlay is present for a zone, the zone's time scheduled settings do not take effect.
        Termination of the overlay (never, set time or when a next block in a schedule starts) 
        is part of the overlay definition.

      properties:
        type:
          $ref: '#/components/schemas/OverlayType'
        setting:
          $ref: '#/components/schemas/ZoneSetting'
        termination:
          type: object
          properties:
            type:
              $ref: '#/components/schemas/OverlayTerminationType'
            durationInSeconds:
              type: integer
              example: 1400
              description: "applicable when termination.type = TIMER"
            remainingTimeInSeconds:
              type: integer
              example: 1400
              description: "applicable when termination.type = TIMER"
            typeSkillBasedApp:
              $ref: '#/components/schemas/TypeSkillBasedApp'
            expiry:
              type: string
              format: date-time
              example: "2024-08-14T23:07:13Z"
              nullable: true
              description: "applicable when termination.type = TIMER"
            projectedExpiry:
              type: string
              format: date-time
              example: "2024-08-14T23:07:13Z"
              nullable: true
              description: "applicable when termination.type = TIMER"

    OverlayInput:
      type: object
      description: used in /homes/{homeId}/zones/{zoneId}/overlay
      properties:
        setting:
          $ref: '#/components/schemas/ZoneSetting'
        termination:
          type: object
          properties:
            typeSkillBasedApp:
              $ref: '#/components/schemas/TypeSkillBasedApp'
            durationInSeconds:
              type: integer
              example: 1400
              description: "applicable when termination.type = TIMER"

    OverlayTerminationType:
      type: string
      enum: [ MANUAL, TADO_MODE, TIMER ]
      example: MANUAL
      description: element of an overlay

    OverlayType:
      type: string
      example: MANUAL
      description: Type of an Overlay. Only known value is MANUAL, but not entirely sure, so no enum

    # PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP
    PercentageDataPoint:
      type: object
      description: element of DayReport
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2024-01-10T22:45:00.000Z"
        value:
          type: number
          format: float
          example: 0.482

    Power:
      type: string
      # quotes are necessary;
      # without it ON and OFF are interpreted as boolean values by the yaml-to-json converter used by openapi-generator
      enum: [ 'ON', 'OFF' ]
      example: ON
      description: used in ZoneSetting

    PresenceLock:
      type: object
      description: Used in /homes/{homeId}/presenceLock
      properties:
        homePresence:
          $ref: '#/components/schemas/HomePresence'

    # SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
    StripesTimeSeries:
      type: object
      description: Element of DayReport
      properties:
        timeSeriesType:
          type: string
          example: dataIntervals
        valueType:
          type: string
          example: stripes
        dataIntervals:
          type: array
          items:
            $ref: '#/components/schemas/StripesDataInterval'

    StripesDataInterval:
      type: object
      description: Element of DayReport
      allOf:
        - $ref: '#/components/schemas/DataInterval'
        - properties:
            value:
              type: object
              properties:
                stripeType:
                  type: string
                  example: HOME_LOCATION_BASED_CONTROL_OFF
                  description: >
                    known values:
                    
                     * OVERLAY_ACTIVE
                    
                     * HOME_LOCATION_BASED_CONTROL_OFF
                setting:
                  $ref: '#/components/schemas/ZoneSetting'

    SunnyTimeSeries:
      type: object
      description: Element of DayReport
      properties:
        timeSeriesType:
          type: string
          example: dataIntervals
        valueType:
          type: string
          example: boolean
        dataIntervals:
          type: array
          items:
            $ref: '#/components/schemas/BooleanDataInterval'

    # TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
    Temperature:
      type: object
      properties:
        celsius:
          type: number
          format: float
          example: 13.9
        fahrenheit:
          type: number
          format: float
          example: 57.02

    TemperatureCapability:
      type: object
      description: property available for zone type HEATING
      properties:
        celsius:
          type: object
          properties:
            min:
              type: integer
              example: 5
            max:
              type: integer
              example: 25
            step:
              type: number
              format: float
              example: 0.1
        fahrenheit:
          type: object
          properties:
            min:
              type: integer
              example: 41
            max:
              type: integer
              example: 77
            step:
              type: number
              format: float
              example: 0.1

    TemperatureLevel:
      type: string
      enum: [ COLD, COMFY, WARM, HOT ]
      example: WARM
      description: Used in AirComfort

    TemperaturePrecision:
      type: object
      properties:
        celsius:
          type: number
          format: float
          example: 0.1
        fahrenheit:
          type: number
          format: float
          example: 0.1

    TemperatureDataPoint:
      type: object
      description: Element of DayReport
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2024-01-10T22:45:00.000Z"
        value:
          $ref: '#/components/schemas/Temperature'

    TimetableBlock:
      type: object
      description: Time segment of a scheduled timetable to control the settings of a zone (a.k.a. room)
      properties:
        dayType:
          $ref: '#/components/schemas/DayType'
        start:
          type: string
          format: time
          example: "21:00"
          description: start time of this block in 24 hour clock notation
        end:
          type: string
          format: time
          example: "22:00"
          description : end time of this block in 24 hour clock notation
        geolocationOverride:
          type: boolean
        setting:
          $ref: '#/components/schemas/ZoneSetting'

    TimetableType:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/TimetableTypeId'
        type:
          $ref: '#/components/schemas/TimetableTypeType'

    TimetableTypeId:
      type: integer
      enum: [0, 1, 2]
      example: 0
      description: 0 = ONE_DAY, 1 = THREE_DAY, 2 = SEVEN_DAY

    TimetableTypeType:
      type: string
      enum: [ONE_DAY, THREE_DAY, SEVEN_DAY]
      example: ONE_DAY
      # empty lines are intentional to control Swagger UI rendering
      description: >
        Each zone has a schedule which controls the zone's settings (like temperature) based on day of the week and time.
        Each schedule consists of three timetables, one for each timeTableType. 
        Only one timetable is active at anyone time.
        
        The timetable type controls the granularity of `DayType`s used in the timetable:
        
        * ONE_DAY = a timetable which support a single day type (MONDAY_TO_SUNDAY), used for every day of the week   
        
        * THREE_DAY = a timetable which supports 3 day types, one for MONDAY_TO_FRIDAY, one for SATURDAY and one for SUNDAY
        
        * SEVEN_DAY = at timetable which supports 7 day types, one for every day of the week

    TypeSkillBasedApp:
      type: string
      description: Used in Overlay
      enum: [ MANUAL, TADO_MODE, TIMER, NEXT_TIME_BLOCK ]
      example: MANUAL

    # UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU
    UnderfloorHeating:
      type: object
      description: Element of HeatingSystem
      properties:
        present:
          type: boolean
          example: false

    User:
      type: object
      description: a user with a tado account
      properties:
        name:
          type: string
          example: Kristel
        email:
          type: string
          example: kristel@example.org
        username:
          type: string
          example: kristel@example.org
        id:
          type: string
          format: uuid
          description: globally unique user ID
          example: a7c7fc08-e362-4700-e9a1-45a5bded5c124
        locale:
          type: string
          description: language code for the user selected language in the Account settings part of the app
          example: en
        homes:
          type: array
          description: the homes this user is linked to
          items:
            $ref: '#/components/schemas/HomeBase'
        mobileDevices:
          type: array
          items:
            $ref: '#/components/schemas/MobileDevice'

    # VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
    VerticalSwing:
      type: string
      # quotes are necessary;
      # without it ON and OFF are interpreted as boolean values by the yaml-to-json converter used by openapi-generator
      enum: [ 'OFF', 'MID_UP', 'MID_DOWN', 'ON', 'DOWN', 'UP', 'MID' ]
      description: Used in AirConditioningCapabilities

    # WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW
    Weather:
      type: object
      description: Result of /homes/{homeId}/weather
      properties:
        solarIntensity:
          type: object
          properties:
            type:
              type: string
              example: PERCENTAGE
            percentage:
              type: number
              example: 0
            timestamp:
              type: string
              format: date-time
              example: "2024-08-04T09:20:08.370Z"
        outsideTemperature:
          type: object
          allOf:
            -  $ref: '#/components/schemas/Temperature'
            - properties:
                timestamp:
                  type: string
                  format: date-time
                  example: "2024-08-04T09:20:08.370Z"
                type:
                  type: string
                  example: TEMPERATURE
                precision:
                  $ref: '#/components/schemas/TemperaturePrecision'
        weatherState:
          type: object
          properties:
            type:
              type: string
              example: WEATHER_STATE
            value:
              $ref: '#/components/schemas/WeatherState'
            timestamp:
              type: string
              format: date-time
              example: "2024-08-04T09:20:08.370Z"

    WeatherConditionTimeSeries:
      type: object
      description: Element of DayReport
      properties:
        timeSeriesType:
          type: string
          example: dataIntervals
        valueType:
          type: string
          example: weatherCondition
        dataIntervals:
          type: array
          items:
            $ref: '#/components/schemas/WeatherConditionDataInterval'

    WeatherConditionDataInterval:
      type: object
      description: Element of DayReport
      allOf:
        - $ref: '#/components/schemas/DataInterval'
        - properties:
            value:
              type: object
              properties:
                state:
                  $ref: '#/components/schemas/WeatherState'
                temperature:
                  $ref: '#/components/schemas/Temperature'

    WeatherSlot:
      type: object
      description: Element of DayReport
      properties:
        state:
          $ref: '#/components/schemas/WeatherState'
        temperature:
          $ref: '#/components/schemas/Temperature'

    WeatherState:
      type: string
      enum: [SUN, CLOUDY, CLOUDY_PARTLY, CLOUDY_MOSTLY, SCATTERED_RAIN, NIGHT_CLEAR, NIGHT_CLOUDY]
      example: CLOUDY_PARTLY
      description: Used in DayReport and Weather

    # ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
    Zone:
      type: object
      description: a room in a home whose temperature is controlled by tado
      properties:
        id:
          $ref: '#/components/schemas/ZoneId'
        name:
          type: string
          description: user assigned name
          example: my living room
        type:
          $ref: '#/components/schemas/ZoneType'
        dateCreated:
          type: string
          format: date-time
          example: "2022-11-25T09:40:14.803Z"
        deviceTypes:
          type: array
          items:
            $ref: '#/components/schemas/DeviceType'
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
        reportAvailable:
          type: boolean
          example: false
        showScheduleSetup:
          type: boolean
          example: true
        supportsDazzle:
          type: boolean
          example: true
        dazzleEnabled:
          type: boolean
          example: true
        dazzleMode:
          type: object
          properties:
            supported:
              type: boolean
              example: true
            enabled:
              type: boolean
              example: true
        openWindowDetection:
          type: object
          properties:
            supported:
              type: boolean
              example: true
            enabled:
              type: boolean
              example: true
            timeoutInSeconds:
              type: integer
              example: 900

    ZoneAwayConfiguration:
      type: object
      description: >
        Controls the settings for a zone when the home the zone belongs to is in AWAY mode.
        The scheduled timetable settings are not used in that situation.
        
        Used in /homes/{homeId}/zones/{zoneId}/awayConfiguration.
      properties:
        type:
          $ref: '#/components/schemas/ZoneType'
        autoAdjust:
          type: boolean
          example: false
          description: property present for zone type HEATING
        comfortLevel:
          type: string
          nullable: true
          description: property present for zone type HEATING
        setting:
          $ref: '#/components/schemas/ZoneSetting'

    ZoneCapabilities:
      type: object
      description: >
        The presence of the various properties depends on the ZoneType and capabilities of the zone who's capabilities are requested.
        E.g. `temperatures` will not be available for a HOT_WATER zone with `canSetTemperature: false`.
        
        Used in /homes/{homeId}/zones/{zoneId}/capabilities.
      properties:
        type:
          $ref: '#/components/schemas/ZoneType'
        temperatures:
          $ref: '#/components/schemas/TemperatureCapability'
        canSetTemperature:
          type: boolean
          example: false
          description: property available for zone type HOT_WATER
        AUTO:
          $ref: '#/components/schemas/AirConditioningModeCapabilitiesBase'
        HEAT:
          $ref: '#/components/schemas/AirConditioningModeCapabilities'
        FAN:
          $ref: '#/components/schemas/AirConditioningModeCapabilities'
        COOL:
          $ref: '#/components/schemas/AirConditioningModeCapabilities'
        DRY:
          $ref: '#/components/schemas/AirConditioningModeCapabilities'
        initialStates:
          type: object
          properties:
            mode:
              $ref: '#/components/schemas/AirConditioningMode'
            modes:
              type: object
              properties:
                COOL:
                  $ref: '#/components/schemas/AirConditioningZoneSettings'
                HEAT:
                  $ref: '#/components/schemas/AirConditioningZoneSettings'
                DRY:
                  $ref: '#/components/schemas/AirConditioningZoneSettings'
                FAN:
                  $ref: '#/components/schemas/AirConditioningZoneSettings'
                AUTO:
                  $ref: '#/components/schemas/AirConditioningZoneSettingsBase'

    ZoneId:
      type: integer
      example: 3
      description: ID of a zone (unique only within the home it belongs to)

    ZoneSetting:
      type: object
      description: >
        Settings for a zone which is used in scheduled TimeTableBlocks, in Overlays (manual override for the scheduled setting),
        and in AwayConfiguration (settings to be used when the home is in AWAY mode).
        
        
        The applicable properties depend on the zone type and the zone capabilities.
      allOf:
        - $ref: '#/components/schemas/AirConditioningZoneSettingsBase'
        - properties:
            type:
              $ref: '#/components/schemas/ZoneType'
            power:
              $ref: '#/components/schemas/Power'
            temperature:
              $ref: '#/components/schemas/Temperature'
            mode:
              $ref: '#/components/schemas/AirConditioningMode'

    ZoneState:
      type: object
      description: Result of /homes/{homeId}/zone/{zoneId}/state
      properties:
        tadoMode:
          type: string
          example: HOME
          description: >
            known values: 
            
            * HOME
        geolocationOverride:
          type: boolean
          example: true
        geolocationOverrideDisableTime:
          #          type: ???
          nullable: true
        preparation:
          #          type: ???
          nullable: true
        setting:
          $ref: '#/components/schemas/ZoneSetting'
        overlayType:
          $ref: '#/components/schemas/OverlayType'
          nullable: true
        overlay:
          $ref: '#/components/schemas/Overlay'
        openWindow:
          #                type: ???
          nullable: true
        nextScheduleChange:
          type: object
          nullable: true
          properties:
            start:
              type: string
              format: date-time
            setting:
              $ref: '#/components/schemas/ZoneSetting'
        nextTimeBlock:
          type: object
          properties:
            start:
              type: string
              format: date-time
              example: "2024-07-31T20:00:00.000Z"
        link:
          type: object
          properties:
            state:
              type: string
              example: ONLINE
              description: >
                known values: 
                
                * ONLINE
        runningOfflineSchedule:
          type: boolean
          example: false
        activityDataPoints:
          type: object
          description: empty for a HOT_WATER zone
          properties:
            heatingPower:
              type: object
              properties:
                type:
                  type: string
                  example: PERCENTAGE
                percentage:
                  type: number
                  example: 0
                timestamp:
                  type: string
                  format: date-time
                  example: "2024-07-30T21:53:40.294Z"
        sensorDataPoints:
          type: object
          description: empty for a HOT_WATER zone
          properties:
            insideTemperature:
              allOf:
                -  $ref: '#/components/schemas/Temperature'
                - properties:
                    timestamp:
                      type: string
                      format: date-time
                      example: "2024-07-30T21:51:41.178Z"
                    type:
                      type: string
                      example: "TEMPERATURE"
                    precision:
                      $ref: '#/components/schemas/TemperaturePrecision'
            humidity:
              type: object
              properties:
                type:
                  type: string
                  example: PERCENTAGE
                percentage:
                  type: number
                  example: 51
                timestamp:
                  type: string
                  format: date-time
                  example: "2024-07-30T21:51:41.178Z"

    ZoneStates:
      type: object
      description: Result of /homes/{homeId}/zoneStates. Basically a map with a zoneID as key and ZoneState as value.
      properties:
        zoneStates:
          description: a dictionary with zone IDs (a.k.a. room IDs) as keys
          additionalProperties:
            $ref: '#/components/schemas/ZoneState'

    ZoneType:
      type: string
      enum: [AIR_CONDITIONING, HEATING, HOT_WATER]
      example: HEATING

tags:
  - name: user
  - name: mobile device
  - name: home
  - name: home control
  - name: zone
  - name: zone control
  - name: device
  - name: report